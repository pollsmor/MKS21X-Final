import java.util.Random;
public class Floor{
  private Block[][] blocksHere; //Array of Blocks (like patches)
  private int floorNumber;
  private int width;
  private int length;
  private Room[] roomsHere; //List of Rooms
  //private Mission[] missions; to be added later if we get to it

  //public Floor(int num, int terminal Width, int terminalLength)
  /** Constructs a Floor based on the terminal width and length and assigns the floor a number
    *@param num an int which will become the floorNumber
    *@param terminalWidth an int which will become the floor's width (used for creating blocksHere)
    *@param terminalLength an int which will become the floor's length (used for creating blocksHere)
  */
  public Floor(int num, int terminalWidth, int terminalLength){
    floorNumber = num;
    blocksHere = new Block[terminalWidth][terminalLength];
  }

  //public int getFloor()
  /**Returns the number of floors the Player has successfully passed
    *@return floorNumber: an int which represents the number of Floors played in the current Game
  */
  public int getFloor(){
    return floorNumber;
  }

  private void createRooms(int seed){
    Random rnd = new Random(seed); //Takes seed generated by Game class
    //First decide number of Rooms to create
    int rooms = rnd.nextInt()%3 + 3;
    roomsHere = new Room[rooms];
    //Using random, generate the xcors and ycors of top right Blocks and bottom left Blocks of the Rooms
    //Minimum width of room: 4 | Max: 10
    //Minimum length of room: 4 | Max: 10
    int startXcor, startYcor, endXcor, endYcor;
    int successfulRooms = 0; //Keep track of how many Rooms were successfully made
    while (successfulRooms < rooms){
      startXcor = rnd.nextInt(width - 6);
      endXcor = startXcor + rnd.nextInt(6) + 4;
      startYcor = rnd.nextInt(length - 6);
      endYcor = startYcor + rnd.nextInt(6) + 4;
      roomsHere[successfulRooms] = new Room(startXcor, startYcor, endXcor, endYcor);
    }
  }

}
