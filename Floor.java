import java.util.Random;
public class Floor{
  private Block[][] blocksHere; //Array of Blocks (like patches)
  private int floorNumber;
  private int width;
  private int length;
  private Room[] roomsHere; //List of Rooms
  //private Mission[] missions; to be added later if we get to it

  //public Floor(int num, int terminal Width, int terminalLength)
  /** Constructs a Floor based on the terminal width and length and assigns the floor a number
    *@param num an int which will become the floorNumber
    *@param terminalWidth an int which will become the floor's width (used for creating blocksHere)
    *@param terminalLength an int which will become the floor's length (used for creating blocksHere)
  */
  public Floor(int num, int terminalWidth, int terminalLength){
    floorNumber = num;
    width = terminalWidth;
    length = terminalLength;
    blocksHere = new Block[width][length];
    for (int x = 0; x < width; x++){
      for (int y = 0; y < length; y++){
        blocksHere[x][y] = new Block(x, y, "Wall");
      }
    }
  }

  //public int getFloor()
  /**Returns the number of floors the Player has successfully passed
    *@return floorNumber: an int which represents the number of Floors played in the current Game
  */
  public int getFloor(){
    return floorNumber;
  }
  public int getWidth(){
    return width;
  }
  public int getLength(){
    return length;
  }
  public void createRooms(int seed){
    Random rnd = new Random(seed); //Takes seed generated by Game class
    //First decide number of Rooms to create
    int rooms = rnd.nextInt()%3 + 3;
    roomsHere = new Room[rooms];
    System.out.println("Rooms: "+rooms);
    //Using random, generate the xcors and ycors of top right Blocks and bottom left Blocks of the Rooms
    //Minimum width of room: 4 | Max: 10
    //Minimum length of room: 4 | Max: 10
    int startXcor, startYcor, endXcor, endYcor;
    int successfulRooms = 0; //Keep track of how many Rooms were successfully made
    while (successfulRooms < rooms){
      startXcor = Math.abs(rnd.nextInt(width - 6));
      endXcor = startXcor + rnd.nextInt(6) + 4;
      startYcor = Math.abs(rnd.nextInt(length - 6));
      endYcor = startYcor + rnd.nextInt(6) + 4;
      //Make sure that rooms don't overlap with each other
      //Rooms overlap when beginning xcor of room to be created is less than the beginnng xcor of a room that already exists
      //AND beginning ycor of the room to be created is less than the beginning ycor of of a room that already exists
      System.out.println("startXcor: "+ startXcor +", startYcor: "+startYcor+", endXcor: "+endXcor+", endYcor: "+endYcor);
      createRoom(startXcor, startYcor, endXcor, endYcor);
      roomsHere[successfulRooms]= createRoom(startXcor, startYcor, endXcor, endYcor);
      successfulRooms++;
    }
  }

  public Room createRoom(int startXcor, int startYcor, int endXcor, int endYcor){
    Room a = new Room(startXcor, startYcor, endXcor, endYcor);
    //Must also update blocksHere
    for (int x = startXcor; x < endXcor; x++){
      for (int y = startYcor; y < endYcor; y++){
        this.blocksHere[x][y] = new Block(startXcor+x,startYcor+y,"Room");
      }
    }
    return a;
  }

  public String toString(){
    String output = "";
    for (int x = 0; x < length; x++){
      for (int y = 0; y < width; y++){
        output+= blocksHere[x][y].getData();
      }
      output+="\n";
    }
    return output+"\nEnd of Floor";
  }
}
